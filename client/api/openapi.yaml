openapi: 3.0.3
info:
  title: Swagger barber reservation - OpenAPI 3.0
  description: |-
    This is a barber-reservation mangement system
  termsOfService: http://swagger.io/terms/
  version: 1.0.11
servers:
- url: http://localhost:8080/
tags:
- name: user
  description: Operations about user
paths:
  /user/createuser:
    post:
      tags:
      - user
      summary: Create user
      description: This method will create the particular user 
      operationId: createUser
      parameters:
      - name: id
        in: query
        description: The user Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: username
        in: query
        description: The user name for login can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: firstName
        in: query
        description: The user first name can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string    
      - name: lastName
        in: query
        description: The user last name can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: email
        in: query
        description: The user login email can define here
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: password
        in: query
        description: The user login password can define here
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: userStatus
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: role
        in: query
        description: The user role can define here
        required: false
        style: form
        explode: true
        schema:
          type: string 
      - name: userType
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      x-swagger-router-controller: User
  /user/modifyuser:
    post:
      tags:
      - user
      summary: modify user
      description: This method will modify the particular user 
      operationId: modifyuser
      parameters:
      - name: id
        in: query
        description: The user Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: username
        in: query
        description: The user name for login can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: firstName
        in: query
        description: The user first name can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string    
      - name: lastName
        in: query
        description: The user last name can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: email
        in: query
        description: The user login email can define here
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: password
        in: query
        description: The user login password can define here
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: userStatus
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: role
        in: query
        description: The user role can define here
        required: false
        style: form
        explode: true
        schema:
          type: string 
      - name: userType
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        description: modify user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      x-swagger-router-controller: User
  
  /user/deleteuser:
    delete:
      tags:
      - user
      summary: delete user
      description: This method will modify the particular user 
      operationId: deletuser
      parameters:
      - name: id
        in: query
        description: The user Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      x-swagger-router-controller: User

  /user/showallusers:
    get:
      tags:
      - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: showAllusers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
      x-swagger-router-controller: User






  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
                x-content-type: application/xml
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
      x-swagger-router-controller: User
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1004
        username:
          type: string
          example: Nandalochana
        firstName:
          type: string
          example: Danushka
        lastName:
          type: string
          example: nanda Lochana
        email:
          type: string
          example: danushkanandalochana@email.com
        password:
          type: string
          example: "12345"
        role:
          type: string
          example: "satff"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
        userType:
          type: integer
          format: int64
          example: 1
      example:
        firstName: Danushka
        lastName: Nanda lochana
        password: "12345"
        userStatus: 1
        id: 1004
        email: danushkanandalochana@email.com
        username: Nandalochana
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      example:
        name: name
        id: 0
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      example:
        code: 0
        type: type
        message: message
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
