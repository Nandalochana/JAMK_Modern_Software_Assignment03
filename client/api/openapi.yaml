openapi: 3.0.3
info:
  title: Swagger barber reservation - OpenAPI 3.0
  description: |-
    This is a barber-reservation mangement system
  termsOfService: http://swagger.io/terms/
  version: 1.0.11
servers:
- url: http://localhost:8080/
tags:
- name: user
  description: Operations about user
paths:
  /user/createuser:
    post:
      tags:
      - user
      summary: Create user
      description: This method will create the particular user 
      operationId: createUser
      parameters:
      - name: id
        in: query
        description: The user Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: username
        in: query
        description: The user name for login can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: firstName
        in: query
        description: The user first name can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string    
      - name: lastName
        in: query
        description: The user last name can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: email
        in: query
        description: The user login email can define here
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: password
        in: query
        description: The user login password can define here
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: userStatus
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: role
        in: query
        description: The user role can define here
        required: false
        style: form
        explode: true
        schema:
          type: string 
      - name: userType
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      x-swagger-router-controller: User
  /user/modifyuser:
    post:
      tags:
      - user
      summary: modify user
      description: This method will modify the particular user 
      operationId: modifyuser
      parameters:
      - name: id
        in: query
        description: The user Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: username
        in: query
        description: The user name for login can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: firstName
        in: query
        description: The user first name can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string    
      - name: lastName
        in: query
        description: The user last name can define here 
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: email
        in: query
        description: The user login email can define here
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: password
        in: query
        description: The user login password can define here
        required: false
        style: form
        explode: true
        schema:
          type: string  
      - name: userStatus
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: role
        in: query
        description: The user role can define here
        required: false
        style: form
        explode: true
        schema:
          type: string 
      - name: userType
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        description: modify user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      x-swagger-router-controller: User
  /user/deleteuser:
    delete:
      tags:
      - user
      summary: delete user
      description: This method will modify the particular user 
      operationId: deletuser
      parameters:
      - name: id
        in: query
        description: The user Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      x-swagger-router-controller: User

  /user/showallusers:
    get:
      tags:
      - user
      summary: show list of users as an array
      description: show list of users as an array
      operationId: showAllusers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
      x-swagger-router-controller: User
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
      - name: email
        in: query
        description: The user email for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username/password supplied
      x-swagger-router-controller: User
  /user/logout:
    get:
      tags:
      - user
      summary: LogOut user into the system
      description: ""
      operationId: logout
      parameters:
      - name: email
        in: query
        description: The user email for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username/password supplied
      x-swagger-router-controller: User   
  /reservation/createreservation: 
    post:
      tags:
      - create-reservation
      summary: createreservation
      description: This method will modifcreate the createreservation 
      operationId: createreservation
      parameters:
      - name: id
        in: query
        description: The reservation Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: customerId
        in: query
        description: The customerId Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: barberid
        in: query
        description: The barber Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: time
        in: query
        description: The booking time can define here
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: date
        in: query
        description: The booking date can define here
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        description: create reservation object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/xml:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
      x-swagger-router-controller: Reservation

  /reservation/updatereservation: 
    patch:
      tags:
      - update-reservation
      summary: createreservation
      description: This method will modifcreate the reservation 
      operationId: modifyreservation
      parameters:
      - name: id
        in: query
        description: The reservation Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: customerId
        in: query
        description: The customerId Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: barberid
        in: query
        description: The barber Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: time
        in: query
        description: The booking time can define here
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: date
        in: query
        description: The booking date can define here
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        description: create reservation object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/xml:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
      x-swagger-router-controller: Reservation   
  /reservation/deletereservation: 
    post:
      tags:
      - delete-reservation
      summary: createreservation
      description: This method will delete the createreservation 
      operationId: deleteresevation
      parameters:
      - name: id
        in: query
        description: The reservation Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: customerId
        in: query
        description: The customerId Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: barberid
        in: query
        description: The barber Id can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: time
        in: query
        description: The booking time can define here
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: date
        in: query
        description: The booking date can define here
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        description: The status can define here
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        description: create reservation object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/xml:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
      x-swagger-router-controller: Reservation
  /reservation/showreservation:
    get:
      tags:
      - Reservation
      summary: show list of Reservation as an array
      description: show list of users as an array
      operationId: showAllusers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
        default:
          description: successful operation
      x-swagger-router-controller: Reservation
  
  /reservation/showreservationbycriteria:
    post:
      tags:
      - Reservation
      summary: search reservation by crieria
      description: This method will search Reservation by crierias  
      operationId: searchreservation
      parameters:
      - name: customername
        in: query
        description: The customername define here
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: barbername
        in: query
        description: The barbername define here
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startdate
        in: query
        description: The startdate define here
        required: false
        style: form
        explode: true
        schema:
          type: object
      - name: enddate
        in: query
        description: The enddate define here
        required: false
        style: form
        explode: true
        schema:
          type: object
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
      x-swagger-router-controller: Reservation
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1004
        username:
          type: string
          example: Nandalochana
        firstName:
          type: string
          example: Danushka
        lastName:
          type: string
          example: nanda Lochana
        email:
          type: string
          example: danushkanandalochana@email.com
        password:
          type: string
          example: "12345"
        role:
          type: string
          example: "satff"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
        userType:
          type: integer
          format: int64
          example: 1
      example:
        firstName: Danushka
        lastName: Nanda lochana
        password: "12345"
        userStatus: 1
        id: 1004
        email: danushkanandalochana@email.com
        username: Nandalochana
      xml:
        name: user
    Reservation: 
      type: object
      properties:
        id:
          type: integer
          format: int64
        customerid:
          type: integer
          format: int64  
        barberid:
          type: integer
          format: int64   
        status:
          type: integer
          format: int64  
        time:
          type: object
          format: date-time  
        date:
          type: object
          format: date-time        
      example:
        id: 5001
        customerId: 15004
        barberid: 450
        status: 1
        time: 20:13
        date: 2013-10-11
      xml:
        name: tag
    SearchInfo:
      type: object
      properties:
        customername:
            type: string
        barbername:
            type: string
        startdate:
          type: object
        enddate:
          type: object
      example:
        customername: danushka
        barbername: kamal
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
